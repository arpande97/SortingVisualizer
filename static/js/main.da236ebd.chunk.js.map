{"version":3,"sources":["SortingVisualizer/sortAlgos.js","SortingVisualizer/SortingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortAnimations","array","animationList","length","temp","slice","mergeSortHelper","mainArray","startId","endId","middleId","Math","floor","k","i","j","push","doMerge","getQuickSortAnimations","quickSortHelper","low","high","p","pivot","animation","comparison","swap","t","partition","heapify","n","id","largest","l","r","DELAY","BAR_COLOR","COMPARISON_COLOR","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","arrayBars","document","getElementsByClassName","b1_id","b2_id","b1_style","style","b2_style","color","setTimeout","backgroundColor","newHeight","height","newAnimations","b1_height","b2_height","getHeapSortAnimations","barOneId","barTwoId","getBubbleSortAnimations","className","type","onClick","mergeSort","quickSort","heapSort","bubbleSort","map","value","idx","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.da236ebd.chunk.js","sourcesContent":["/*\r\nThe code for the animation of mergeSort was taken from \r\nhttps://www.youtube.com/watch?v=pFXYym4Wbkc&t=282s&ab_channel=Cl%C3%A9mentMihailescu \r\n*/\r\nexport function getMergeSortAnimations(array) {\r\n    const animationList = [];\r\n    if (array.length <= 1) return array;\r\n    const temp = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, temp, animationList);\r\n    return animationList;\r\n  }\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startId,\r\n    endId,\r\n    temp,\r\n    animationList,\r\n  ) {\r\n    if (startId === endId) return;\r\n    const middleId = Math.floor((startId + endId) / 2);\r\n    mergeSortHelper(temp, startId, middleId, mainArray, animationList);\r\n    mergeSortHelper(temp, middleId + 1, endId, mainArray, animationList);\r\n    doMerge(mainArray, startId, middleId, endId, temp, animationList);\r\n  }\r\n  \r\n  function doMerge(mainArray, startId, middleId, endId, temp, animationList){\r\n    let k = startId;\r\n    let i = startId;\r\n    let j = middleId + 1;\r\n    while (i <= middleId && j <= endId) {\r\n      animationList.push([i, j]);\r\n      animationList.push([i, j]);\r\n      if (temp[i] <= temp[j]) {\r\n        animationList.push([k, temp[i]]);\r\n        mainArray[k++] = temp[i++];\r\n      } else {\r\n        animationList.push([k, temp[j]]);\r\n        mainArray[k++] = temp[j++];\r\n      }\r\n    }\r\n    while (i <= middleId) {\r\n      animationList.push([i, i]);\r\n      animationList.push([i, i]);\r\n      animationList.push([k, temp[i]]);\r\n      mainArray[k++] = temp[i++];\r\n    }\r\n    while (j <= endId) {\r\n      animationList.push([j, j]);\r\n      animationList.push([j, j]);\r\n      animationList.push([k, temp[j]]);\r\n      mainArray[k++] = temp[j++];\r\n    }\r\n  }\r\n/*\r\nThe quicksort here is done using the Lomuto partition.\r\nIn Lomuto partition, you compare each element with the last element and \r\ndivide the array such that elements smaller than the pivot reside in \r\none half of the array and the bigger ones at the other end.\r\n*/\r\n/*\r\nQuicksort can be optimized if instead of chosing last element as\r\nthe pivot, we randomly select an element from the array as the pivot.\r\n*/\r\n  export function getQuickSortAnimations(array){\r\n      const animationList = [] ;\r\n      // const temp = array.slice() ;\r\n      if(array.length <= 1) return array ;\r\n      quickSortHelper(array, 0, array.length - 1, animationList) ;\r\n      return animationList ;\r\n  }\r\n\r\n  function quickSortHelper(array, low, high, animationList, temp){\r\n      if(low >= high) return ;\r\n      const p = partition(array, low, high, animationList) ;\r\n      quickSortHelper(array, low, p - 1, animationList) ;\r\n      quickSortHelper(array, p + 1, high, animationList) ;\r\n  }\r\n\r\n  function partition(array, low, high, animationList){\r\n      let pivot = array[high] ;\r\n      let i = low - 1 ;\r\n      for(let j = low ; j < high ; j++){\r\n          const animation = {} ;\r\n          animation.comparison = [j, high] ;\r\n          if(array[j] < pivot){\r\n              i++ ;\r\n              animation.swap = [i, j, array[i], array[j]] ;\r\n              let t = array[i] ;\r\n              array[i] = array[j] ;\r\n              array[j] = t ;\r\n\r\n          }\r\n          //we will be sending both the index and height of both the bars being compared into the animation list.\r\n          //which is an object containing the comparison and swap property.\r\n          else animation.swap = [j, j, array[j], array[j]] ;\r\n          animationList.push(animation) ;\r\n      }\r\n      //we will be sending both the index and height of both the bars being compared into the animation list.\r\n          //which is an object containing the comparison and swap property.\r\n      animationList.push({\r\n        comparison : [i + 1, i + 1], \r\n        swap : [i + 1, high, array[i + 1], array[high]], \r\n      }) ;\r\n      let t = array[i + 1] ;\r\n      array[i + 1] = array[high] ;\r\n      array[high] = t ;\r\n      return i + 1 ;\r\n  }\r\n\r\n  export function getBubbleSortAnimations(array){\r\n    const animationList = [] ;\r\n    if(array.length <= 1) return array ;\r\n    for(let i = 0 ; i < array.length - 1 ; i++){\r\n      for(let j = 0 ; j < array.length - i - 1 ; j++){\r\n        animationList.push([j, j + 1]) ;\r\n        animationList.push([j, j + 1]) ;\r\n        if(array[j] > array[j + 1]){\r\n          //we will be sending both the index and height of both the bars being compared into the animation list.\r\n          //which is an object containing the comparison and swap property.\r\n          animationList.push([j, j + 1, array[j], array[j + 1]]) ;\r\n          let t = array[j] ;\r\n          array[j] = array[j + 1] ;\r\n          array[j + 1] = t ;\r\n        }\r\n        else{\r\n          animationList.push([j, j, array[j], array[j]]) ;\r\n        }\r\n      }\r\n    }\r\n    return animationList ;\r\n  }\r\n\r\n  export function getHeapSortAnimations(array){\r\n    const animationList = [] ;\r\n    for(let i = Math.floor(array.length / 2) - 1 ; i >= 0 ; i--){\r\n      heapify(array, animationList, array.length, i) ;\r\n    }\r\n    for(let i = array.length - 1 ; i > 0 ; i--){\r\n      animationList.push({\r\n        comparison : [i, i], \r\n        swap: [0, i, array[0], array[i]],\r\n      }) ;\r\n      let t = array[0] ;\r\n      array[0] = array[i] ;\r\n      array[i] = t ;\r\n      heapify(array, animationList, i, 0) ;\r\n    }\r\n    return animationList ;\r\n  }\r\n\r\n  function heapify(array, animationList, n, id){\r\n    let largest = id ;\r\n    let l = (2 * id) + 1 ;\r\n    let r = (2 * id) + 2 ;\r\n    if(l < n && array[l] > array[largest]){\r\n      animationList.push({\r\n        comparison: [largest, l], \r\n        //we will be sending both the index and height of both the bars being compared into the animation list.\r\n          //which is an object containing the comparison and swap property.\r\n        swap: [largest, largest, array[largest], array[largest]],\r\n      }) ;\r\n      largest = l ;\r\n    }\r\n    if(r < n && array[r] > array[largest]){\r\n      animationList.push({\r\n        comparison: [largest, r],\r\n        swap: [largest, largest, array[largest], array[largest]],\r\n      }) ;\r\n      largest = r ;\r\n    }\r\n    if(largest !== id){\r\n      animationList.push({\r\n        comparison: [id, id],\r\n        //we will be sending both the index and height of both the bars being compared into the animation list.\r\n          //which is an object containing the comparison and swap property.\r\n        swap: [id, largest, array[id], array[largest]],\r\n      }) ;\r\n      let t = array[id] ;\r\n      array[id] = array[largest] ;\r\n      array[largest] = t ;\r\n      heapify(array, animationList, n, largest) ;\r\n    }\r\n  }","import React from 'react';\r\nimport {getMergeSortAnimations, getQuickSortAnimations, \r\n  getBubbleSortAnimations, getHeapSortAnimations} from './sortAlgos.js';\r\nimport './SortingVisualizer.css';\r\n\r\n//DELAY = 10 is slow for bubble sort.\r\n//maybe add a increaseDelay button??\r\nconst DELAY = 10;\r\n//LENGTH is the size of the array\r\nconst LENGTH = 100;\r\nconst BAR_COLOR = 'yellowgreen';\r\nconst COMPARISON_COLOR = 'red';\r\n\r\n/*\r\nFor each type of sort, the idea is that we push comparison values twice, once to change color\r\nto red and then back to yellowgreen.\r\nThe third push actually swaps the values.\r\n*/\r\n\r\n/*\r\nFor merge sort, we overwrite into the main array instead of swapping(i.e the third push into the animationList)\r\n*/\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < LENGTH; i++) {\r\n      /*\r\n      Why are the values from 5 to 600?\r\n      If we use smaller values than 5, the bar is too small to be visible.\r\n      Values are generated using the generateRandom(min, max) function defined at the end.\r\n      */\r\n      array.push(generateRandom(5, 600));\r\n    }\r\n    this.setState({array});\r\n  }\r\n\r\n  mergeSort() {\r\n    const animationList = getMergeSortAnimations(this.state.array);\r\n    for (let i = 0; i < animationList.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      /*\r\n      Every third entry in the animationList is that of a swap and the first two are that of comparing, which\r\n      we use to change colors back and forth.\r\n      */\r\n      const compareValues = i % 3 !== 2;\r\n      if (compareValues) {\r\n        const [b1_id, b2_id] = animationList[i];\r\n        const b1_style = arrayBars[b1_id].style;\r\n        const b2_style = arrayBars[b2_id].style;\r\n        const color = i % 3 === 0 ? COMPARISON_COLOR : BAR_COLOR;\r\n        setTimeout(() => {\r\n          b1_style.backgroundColor = color;\r\n          b2_style.backgroundColor = color;\r\n        }, i * DELAY);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [b1_id, newHeight] = animationList[i];\r\n          const b1_style = arrayBars[b1_id].style;\r\n          //swapping means change the height of the bars.\r\n          b1_style.height = `${newHeight}px`;\r\n        }, i * DELAY);\r\n      }\r\n    }\r\n  }\r\n\r\n  quickSort() {\r\n    const animationList = getQuickSortAnimations(this.state.array) ;\r\n    const newAnimations = [] ;\r\n    /*\r\n      Every third entry in the animationList is that of a swap and the first two are that of comparing, which\r\n      we use to change colors back and forth.\r\n      */\r\n    for(const animation of animationList){\r\n      newAnimations.push(animation.comparison) ;\r\n      newAnimations.push(animation.comparison) ;\r\n      newAnimations.push(animation.swap) ;\r\n    }\r\n    for(let i = 0 ; i < newAnimations.length ; i++){\r\n      const arrayBars = document.getElementsByClassName('array-bar') ;\r\n      const compareValues = i % 3 !== 2 ;\r\n      if(compareValues) {\r\n        const [b1_id, b2_id] = newAnimations[i] ;\r\n        const b1_style = arrayBars[b1_id].style ;\r\n        const b2_style = arrayBars[b2_id].style ;\r\n        const color = i % 3 === 0 ? COMPARISON_COLOR : BAR_COLOR ;\r\n        setTimeout(() => {\r\n          b1_style.backgroundColor = color ;\r\n          b2_style.backgroundColor = color ;\r\n        }, i * DELAY) ;\r\n      } else {\r\n        setTimeout(() => {\r\n          //swap happens here\r\n          const [b1_id, b2_id, b1_height, b2_height] = newAnimations[i] ;\r\n          const b1_style = arrayBars[b1_id].style ;\r\n          const b2_style = arrayBars[b2_id].style ;\r\n          //swapping means change the height of the bars.\r\n          b1_style.height = `${b2_height}px` ;\r\n          b2_style.height = `${b1_height}px` ;\r\n        }, i * DELAY) ;\r\n      }\r\n    }\r\n  }\r\n\r\n  heapSort() {\r\n    const animationList = getHeapSortAnimations(this.state.array) ;\r\n    const newAnimations = [] ;\r\n    /*\r\n      Every third entry in the animationList is that of a swap and the first two are that of comparing, which\r\n      we use to change colors back and forth.\r\n      */\r\n    for(const animation of animationList){\r\n      newAnimations.push(animation.comparison) ;\r\n      newAnimations.push(animation.comparison) ;\r\n      newAnimations.push(animation.swap) ;\r\n    }\r\n    for(let i = 0 ; i < newAnimations.length ; i++){\r\n      const arrayBars = document.getElementsByClassName('array-bar') ;\r\n      const compareValues = i % 3 !== 2 ;\r\n      if(compareValues){\r\n        const [barOneId, barTwoId] = newAnimations[i] ;\r\n        const b1_style = arrayBars[barOneId].style ;\r\n        const b2_style = arrayBars[barTwoId].style ;\r\n        const color = i % 3 === 0 ? COMPARISON_COLOR : BAR_COLOR ;\r\n        setTimeout(() => {\r\n          b1_style.backgroundColor = color ;\r\n          b2_style.backgroundColor = color ;\r\n        }, i * DELAY) ;\r\n      }\r\n      else {\r\n        setTimeout(() => {\r\n          const [b1_id, b2_id, b1_height, b2_height] = newAnimations[i] ;\r\n          const b1_style = arrayBars[b1_id].style ;\r\n          const b2_style = arrayBars[b2_id].style ;\r\n          //swapping means change the height of the bars.\r\n          b1_style.height = `${b2_height}px` ;\r\n          b2_style.height = `${b1_height}px` ;\r\n        }, i * DELAY) ;\r\n      }\r\n    }\r\n  }\r\n\r\n  bubbleSort() {\r\n    const animationList = getBubbleSortAnimations(this.state.array) ;\r\n    for(let i = 0 ; i < animationList.length ; i++){\r\n      const arrayBars = document.getElementsByClassName('array-bar') ;\r\n      /*\r\n      Every third entry in the animationList is that of a swap and the first two are that of comparing, which\r\n      we use to change colors back and forth.\r\n      */\r\n      const compareValues = i % 3 !== 2 ;\r\n      if(compareValues){\r\n        const [b1_id, b2_id] = animationList[i] ;\r\n        const b1_style = arrayBars[b1_id].style ;\r\n        const b2_style = arrayBars[b2_id].style ;\r\n        const color = i % 3 === 0 ? COMPARISON_COLOR : BAR_COLOR ;\r\n        setTimeout(() => {\r\n          b1_style.backgroundColor = color ;\r\n          b2_style.backgroundColor = color ;\r\n        }, i * DELAY);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [b1_id, b2_id, b1_height, b2_height] = animationList[i] ;\r\n          const b1_style = arrayBars[b1_id].style ;\r\n          const b2_style = arrayBars[b2_id].style ;\r\n          //swapping means change the height of the bars.\r\n          b1_style.height = `${b2_height}px` ;\r\n          b2_style.height = `${b1_height}px` ;\r\n        }, i * DELAY) ;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    const {array} = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <div className =\"project_Name\">\r\n          <p>SORTING VISUALIZER</p>\r\n        </div>\r\n        <button \r\n        type = \"button\"\r\n        className = \"button_1\"\r\n        onClick={() => this.resetArray()}>Reset\r\n        </button>\r\n        <button \r\n        type = \"button\"\r\n        className = \"button_2\"\r\n        onClick={() => this.mergeSort()}>Merge Sort</button>\r\n        <button \r\n        type = \"button\"\r\n        className = \"button_2\"\r\n        onClick={() => this.quickSort()}>Quick Sort</button>\r\n        <button \r\n        type = \"button\"\r\n        className = \"button_2\"\r\n        onClick={() => this.heapSort()}>Heap Sort</button>\r\n        <button \r\n        type = \"button\"\r\n        className = \"button_2\"\r\n        onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n      <div className=\"array-container\">\r\n        {array.map((value, idx) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{\r\n              backgroundColor: BAR_COLOR,\r\n              height: `${value}px`,\r\n            }}></div>\r\n        ))}\r\n        <br></br>\r\n        \r\n      </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction generateRandom(min, max) {\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer' ;\nimport './App.css';\n/*\nThe inspiration and the CSS style elements of this project were taken from\nhttps://www.youtube.com/watch?v=pFXYym4Wbkc&t=282s&ab_channel=Cl%C3%A9mentMihailescu\n*/\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}